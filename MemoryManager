/**
 * 
 */

/**
 * 
 */
public class MemoryManager {
    
    private byte[] memoryPool;
    private FreeBlockList freeBlockList;
    
    // Constructor. poolsize defines the size of the memory pool in bytes
    public MemoryManager(int poolSize) {
        
        this.memoryPool = new byte[poolSize];
        this.freeBlockList = new FreeBlockList(poolSize);
    }
    
    // Insert a record and return its position handle.
    // space contains the record to be inserted, of length size.
    public Handle insert(byte[] space, int size) {
        
        Handle member = freeBlockList.allocateBlock(size);
        
        space[member.getStart()] = (byte)size;
       
        return member;

    }
    
    // Return the length of the record associated with theHandle
    public int length(Handle theHandle) {
        
        return theHandle.getLength();
        
    }
    
    // Free a block at the position specified by theHandle.
    // Merge adjacent free blocks.
    public void remove(Handle theHandle) {
        
        //add a block of appropriate size to FBL
        freeBlockList.releaseBlock(theHandle);
        
        //merge free blokcs
        freeBlockList.mergeFreeBlocks();
    }
    
    // Return the record with handle posHandle, up to size bytes, by
    // copying it into space.
    // Return the number of bytes actually copied into space.
    public int get(byte[] space, Handle theHandle, int size) {
        
    }
    
    // Dump a printout of the freeblock list
    public void dump() {
        
    }
    

    
    
  

}
